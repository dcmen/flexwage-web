#!/usr/bin/env node

/**
 * Module dependencies.
 */

const ParameterStoreService = require("../service/parameter-store-service");

(async () => {
  try {
    const parameterStoreInstance = ParameterStoreService.getInstance();
    await parameterStoreInstance.getProperties();
  } catch (e) {
    console.log(e);
  }

  console.log("DEBUGGING PARAMS API HTTPS: ", process.env.API_HTTPS);
  console.log("DEBUGGING PARAMS API HTTP: ", process.env.API_HTTP);
  var app = require('../app');
  var debug = require('debug')('node-rest-auth:server');
  const socket = require('socket.io');
  var http = require('http');
  const https = require('https');
  const fs = require('fs')
  var rom = null;

  const httpsOptions = {
    cert: fs.readFileSync('ssl/api_cashd_co.crt'),
    ca: fs.readFileSync('ssl/api_cashd_co.ca-bundle'),
    key: fs.readFileSync('ssl/api_cashd_co.key')
  };

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT_HTTP);
  var portHttps = normalizePort(process.env.PORT_HTTPS);
  app.set('port', port);

  var whitelist = ['https://cashd.com.au', 'https://cashd.co', 'http://localhost:4001', 'https://api.cashd.co', 'https://test.web.cashd.net.au', 'https://web.cashd.com.au'];

  app.use((req, res, next) => {
    let origin = req.headers.origin;
    let theOrigin = (whitelist.indexOf(origin) >= 0) ? origin : whitelist[0];

    res.header("Access-Control-Allow-Origin", theOrigin);
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");

    next();
  });


  /**
   * Create HTTP server.
   */

  var server = http.createServer(app, (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.writeHead(200, {'Content-Type': 'application/json'});
    res.end();
  });

  var httpsServer = https.createServer(httpsOptions, app, (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.writeHead(200, {'Content-Type': 'application/json'});
    res.end();
  });
  var io = socket(server);
  var ios = socket(httpsServer);

  io.on('connection', (socket) => {
    console.log('Client ' + socket.id + ' connected.');
    socket.on("disconnect", () => {
      console.log('disconnect', socket.id);
    });
    socket.on("join", (data) => {
      socket.broadcast.emit('join', {...data});
    });
    socket.on("action form DD", (data) => {
      socket.broadcast.emit(data.companyId, data);
    });
    socket.on("repayment", (data) => {
      socket.broadcast.emit(data.companyId + "_REPAYMENT", data);
    });
    socket.on("deductionProcessControl", data => {
      socket.broadcast.emit(data.companyId + "_DPC", data);
    });
  });

  ios.on('connection', (socket) => {
    console.log('Client ' + socket.id + ' connected.');
    socket.on("disconnect", () => {
      console.log('disconnect', socket.id);
    });
    socket.on("join", (data) => {
      socket.broadcast.emit('join', {...data});
    });
    socket.on("action form DD", (data) => {
      socket.broadcast.emit(data.companyId, data);
    });
    socket.on("repayment", (data) => {
      socket.broadcast.emit(data.companyId + "_REPAYMENT", data);
    });
    socket.on("deductionProcessControl", data => {
      socket.broadcast.emit(data.companyId + "_DPC", data);
    });
  });

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  server.timeout = 1800000;

  httpsServer.listen(portHttps);
  httpsServer.on('error', onError);
  httpsServer.on('listening', httpsOnListening);
  httpsServer.timeout = 1800000;

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }


  function httpsOnListening() {
    var addr = httpsServer.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
})();
